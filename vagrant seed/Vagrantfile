# -*- mode: ruby -*-
# vi: set ft=ruby :

# **********************************
# TO CREATE A NEW BASE BOX FROM THIS
# from: https://scotch.io/tutorials/how-to-create-a-vagrant-base-box-from-an-existing-one
# 1) From SSH, make existing box as small as possible then exit
#   - sudo apt-get clean
#   - sudo dd if=/dev/zero of=/EMPTY bs=1M
#   - sudo rm -f /EMPTY
#   - cat /dev/null > ~/.bash_history && history -c && exit
# 2) Repackage the VM into a new Vagrant box
#   - vagrant package --output mynew.box
# 3) Add the box into your Vagrant install
#   - vagrant box add mynewbox mynew.box
#
# Whether you destroy the original is your call
# **********************************

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", type: "dhcp"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
  
    # Customize the amount of memory on the VM:
    vb.memory = "2048"
    # 
    # enable symlinks on shared folder
    vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/Vagrant", "1"]
    # 
    # verify symlinks on shared folder enabled
    vb.customize ["getextradata", :id, "enumerate"]
    
  end

  # INSECURE FOR GREAT PUTTY JUSTICE
  config.ssh.insert_key = false
 
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

    # TODO: check if VM has already been provisioned, so 'vagrant provision' 
    #   doesn't fail... perhaps in a global variable?

    installGlobalNpmPackages() {

      echo "...install NPM 3+"
      # sudo npm install -g npm@3.3.0
      sudo npm install -g npm@3.x-latest
      
      echo "...install babel"
      sudo npm install -g babel

      echo "...installing stylint"
      sudo npm install -g stylint

      echo "...install gulp"
      sudo npm install -g gulp

      echo "...install bower"
      sudo npm install -g bower
    }

    installNode() {
      # Note the new setup script name for latest Node.js v0.12.x
      curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -

      # Then install with:
      sudo apt-get install -y nodejs
    
      installGlobalNpmPackages
    }
    
    installFlow() {
      # TODO: PATH is pretty brute force, seems wrong, but .bashrc 
      #   and .profile both failed
      sudo apt-get install unzip
      wget http://flowtype.org/downloads/flow-linux64-latest.zip
      sudo unzip flow-linux64-latest.zip -d /opt/
      rm -f flow-linux64-latest.zip
      sudo echo -e "\nPATH=\"\$PATH:/opt/flow\"" > /etc/environment
      echo "flow added to path in /etc/environment"
    }

    installMongo() {
      # Import the public key used by the package management system.
      sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10

      # Create a list file for MongoDB.
      echo "deb http://repo.mongodb.org/apt/ubuntu "$(lsb_release -sc)"/mongodb-org/3.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list

      # Reload local package database.
      sudo apt-get update

      # Install the latest stable version of MongoDB.
      sudo apt-get install -y mongodb-org
    }

    echo "...install MongoDB 3.x"
    installMongo
    
    # uncomment the following if you're not installing mongo (or something that runs "apt-get update")
    # echo "...Update apt-get..."
    # sudo apt-get update
    
    echo "...now apt-get upgrade..."
    sudo apt-get upgrade -y
    
    echo "...install node.js"
    installNode
    
    echo "...install flow type..."
    installFlow
    
    echo "...install git..."
    sudo apt-get install git -y

  SHELL
  # config.vm.provision "shell", inline: <<-SHELL
  # SHELL
  # 
end
